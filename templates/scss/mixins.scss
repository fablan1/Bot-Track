
$navBarBgColor:#03A9F4;


$green:#26ba84;
$red:#ba472e;

@mixin input-placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}
}

@mixin font-family-default {

  font-family: 'Roboto', sans-serif;
  font-weight:300;
}

@mixin appearance ($value) {

  -webkit-appearance: $value;
  -moz-appearance:$value;
  -ms-appearance:$value;
  -o-appearance:$value
}

@mixin box-sizing($value) {

  box-sizing: $value;
  -webkit-box-sizing: $value;
  -moz-box-sizing: $value;
  -ms-box-sizing: $value;
  -o-box-sizing: $value;
}

@mixin user-select($value) {

  -user-select:$value;
  -webkit-user-select:$value;
  -moz-user-select:$value;
  -ms-user-select: $value;
  -o-user-select: $value;
}

@mixin tap-highlight-color($value) {

  tap-highlight-color:$value;
  -webkit-tap-highlight-color:$value;
  -moz-backface-visibility:$value;
  -ms-backface-visibility:$value;
  -o-backface-visibility:$value;
}

@mixin backface-visibility($value) {

  backface-visibility:$value;
  -webkit-backface-visibility:$value;
}

@mixin text-fill-color($value) {

  text-fill-color: $value;
  -webkit-text-fill-color: $value;
}

@mixin transform-origin($value) {

  transform-origin: $value;
  -webkit-transform-origin: $value;
  -moz-transform-origin: $value;
  -ms-transform-origin: $value;
  -o-transform-origin: $value;
}

@mixin transform-style($value) {

  transform-style:$value;
  -webkit-transform-style:$value;
  -moz-transform-style:$value;
  -ms-transform-style:$value;
}

@mixin transform($value) {

  transform:$value;
  -webkit-transform:$value;
  -moz-transform:$value;
  -ms-transform:$value;
  -o-transform:$value;
}

@mixin transform-origin($value) {

  transform-origin:$value;
  -webkit-transform-origin:$value;
  -moz-transform-origin:$value;
  -ms-transform-origin:$value;
  -o-transform-origin:$value;
}

@mixin filter($value) {

  filter:$value;
  -webkit-filter:$value;
  -moz-filter:$value;
  -ms-filter:$value;
  -o-filter:$value;
}

@mixin animation($value) {

  animation:$value;
  -webkit-animation:$value;
  -moz-animation:$value;
  -o-animation:$value;
}

@mixin keyframes($name) {

  @keyframes #{$name} {
    @content;
  }
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
}

@mixin text-ellipsis {

  white-space: nowrap;
  overflow:hidden;
  text-overflow:ellipsis;
}

// loops through all arguments and prefixes the ones that need it (in this case only transform)
@function vendor-args($arg, $vendor) {
  $result: ();
  @each $i in $arg {
    @if $i == transform or $i == filter  { $result: append($result, #{$vendor}$i); }
    @else { $result: append($result, $i); }
  }
  @return $result;
}

// general vendor mixin
@mixin vendor($property, $args...){
  @each $vendor in ('-webkit-', '-moz-', '-ms-', '-o-', '') {
    $out: null;
    @each $arg in nth($args,1) {
      $out: ($out, vendor-args($arg, $vendor));
    }
    #{$vendor}#{$property}: $out;
  }
}

// general transition mixin
@mixin transition($args...) {
  @include vendor(transition, $args);
}




@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
        str-replace(str-slice($string, $index +
        str-length($search)), $search, $replace);
  }
  @return $string;
}

@function svg-url($svg,$bg){
  //
  // Chunk up string in order to avoid
  // "SystemStackError: stack level too deep"
  //

  // encodes data uri-> required to get it working in IE
  $encoded:'';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);

    $chunk: str-replace($chunk,'fill="#000000"','fill="'$bg'"');

    $chunk: str-replace($chunk,'"','\'');
    $chunk: str-replace($chunk,'<','%3C');
    $chunk: str-replace($chunk,'>','%3E');
    $chunk: str-replace($chunk,'&','%26');
    $chunk: str-replace($chunk,'#','%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

@function inline_svg_image($svg) {

  @return svg-url(load_inline_svg_image($svg),'');
}

@function inline_svg_image_changeBg($svg) {

  //@return '';
  @return svg-url(load_inline_svg_image($svg),'#FFFFFF');
}